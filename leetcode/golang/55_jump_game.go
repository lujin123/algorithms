package leetcode

// https://leetcode-cn.com/problems/jump-game/
/**
55. 跳跃游戏

给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
*/

// 从后往前遍历数组，如果遇到的元素可以到达最后一行，则截断后边的元素;
// 否则继续往前，知道遍历完数组，最后剩下的元素大于1个，则可以判断为假，否则就是真，
// 时间复杂度 = O(n)
func canJump(nums []int) bool {
	n := 1
	for i := len(nums) - 2; i >= 0; i-- {
		if nums[i] >= n {
			n = 1
		} else {
			n++
		}
	}
	return n == 1
}
